import React, { useState, useEffect } from 'react';
import DropdownInput from '../Forms/DropdownInput';
import { GetallusersUrl, postBookingAdminsUrl } from '../../helpers/constants';
import useApi from '../../hooks/useApi.hook';
import ModalBase from './ModalBase.jsx';
import ButtonMy from "../Buttons/ButtonMy.jsx";
import dayjs from 'dayjs';
import './BookingModal.css'

const BookingModal = ({ isOpen, onClose, onSubmit, slot }) => { // –ø–µ—Ä–µ–¥–∞—ë–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç slot
	const api = useApi();
	const [users, setUsers] = useState([]);
	const [selectedUser, setSelectedUser] = useState(null);

	useEffect(() => {
		if (!isOpen) return;

		(async () => {
			try {
				const { data } = await api.get(GetallusersUrl);
				if (Array.isArray(data)) setUsers(data);
				else setUsers([]);
			} catch (err) {
				console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
				setUsers([]);
			}
		})();
	}, [isOpen, api]);

	const handleUserChange = option => setSelectedUser(option);

	const handleSubmit = async (e) => {
		e.preventDefault();

		if (!selectedUser) {
			alert('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!');
			return;
		}

		try {
			const response = await api.post(postBookingAdminsUrl, {
				user_id: selectedUser.value,
				slot_id: slot.id,
				created_at: new Date().toISOString(),
				source_record: '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
			});

			if (response.status === 201) {
				const fullUser = users.find(u => u.id === selectedUser.value);

				if (fullUser?.telegram_id && slot?.time) {
					const dateStr = dayjs(slot.time).format("DD.MM.YY");
					const timeStr = dayjs(slot.time).format("HH:mm");

					const message = `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!\n–ñ–¥–µ–º –í–∞—Å ${dateStr} –≤ ${timeStr} ü•ä\n<i>–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å ‚Äî –∑–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (üë§)" ‚Üí "–ú–æ–∏ –ó–∞–ø–∏—Å–∏"</i>`;

					try {
						await fetch(`https://api.telegram.org/bot7728171720:AAGyOYHnvnwScbctXvaYu2p45rKQRU_T_Ik/sendMessage`, {
							method: "POST",
							headers: { "Content-Type": "application/json" },
							body: JSON.stringify({
								chat_id: fullUser.telegram_id,
								text: message,
								parse_mode: "HTML"
							}),
						});
					} catch (err) {
						console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", err);
					}
				}

				alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!');
				onSubmit && onSubmit();
				onClose(true);
			} else {
				alert('–û—à–∏–±–∫–∞: –∑–∞–ø–∏—Å—å –Ω–µ –ø—Ä–æ—à–ª–∞.');
			}
		} catch (err) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
			alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
		}
	};

	if (!isOpen) return null;

	return (
		<ModalBase onClose={() => onClose(true)} className="modal-new">
			<form onSubmit={handleSubmit} className="modal-new-booking" style={{
				background: 'var(--background-color)',
				padding: '20px',
				borderRadius: '10px',
				boxShadow: '0 2px 10px rgba(0,0,0,0.3)',
				margin: '10px'
			}}>
				<h3>–ó–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</h3>
				<DropdownInput
					options={users.map(user => ({ value: user.id, label: `${user.last_name || ''} ${user.name || ''}`.trim() }))}
					value={selectedUser}
					onChange={handleUserChange}
					placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
					isClearable={true}
				/>
				<ButtonMy>–ó–∞–ø–∏—Å–∞—Ç—å</ButtonMy>
			</form>
		</ModalBase>
	);
};

export default BookingModal;
